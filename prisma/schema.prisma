generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  firstName       String
  lastName        String?
  email           String     @unique
  password        String
  bio             String?
  profilePicture  String?
  gender      Gender
  dateofbirth DateTime
  createdAt       DateTime   @default(now())
  post            Post[]
  comment         Comment[]  @relation("CommentAuthor")
  friends         Friendship[] @relation("UserFriendsA")
  friendOf        Friendship[] @relation("UserFriendsB")
  messageSent     Message[]  @relation("SentMessages")
  messageReceive  Message[]  @relation("ReceivedMessages")
  updatedAt       DateTime   @default(now()) @updatedAt
}

enum Gender{
  male
  female
  custom
}

model Post {
  id         Int      @id @default(autoincrement())
  content    String
  media  Media[]
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  comment    Comment[] @relation("PostComments")
  updatedAt  DateTime @default(now()) @updatedAt
  createdAt  DateTime @default(now())
}


model Media{
  id Int @id @default(autoincrement())
  url String
  type MediaType
  post Post @relation(fields: [postId], references: [id])
  postId Int


}

enum MediaType{
  IMAGE
  VIDEO
}



model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  post       Post      @relation("PostComments", fields: [postId], references: [id])
  postId     Int
  author     User      @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId   Int
  updateAt   DateTime  @default(now()) @updatedAt
  createdAt  DateTime  @default(now())
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   Int?
  replies    Comment[] @relation("CommentReplies")
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userAId   Int
  userBId   Int
  createdAt DateTime @default(now())

  userA     User     @relation("UserFriendsA", fields: [userAId], references: [id])
  userB     User     @relation("UserFriendsB", fields: [userBId], references: [id])

  @@unique([userAId, userBId])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  sentAt     DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
